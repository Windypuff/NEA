@using NEA.Controllers
@model EquationDTO
@using Highsoft.Web.Mvc.Charts
@using Highsoft.Web.Mvc.Charts.Rendering

@{
    ViewData["Title"] = "Home Page";
    List<string> solutions = null;
    if (Model.solutions != null){
        solutions = Model.solutions;
    }
}
<div class="container">
    <form method="POST" enctype="multipart/form-data" >
        <div class="form-group">
            <div class="input-group shadow">
                
                <input name="equation" type="text" class="form-control form-control-lg dummy-file-input" placeholder="Input Equation Here" >
                <button id="btn-submit" class="btn btn-success" type="submit"><i class="fas fa-upload"></i> Submit </button> 
            </div>
             
        </div>
    
    </form>
</div>

<div class="text-center">
    @{
        if (solutions != null){
            @foreach (var solution in solutions)
            {
            <li class = "list-group-item">
                x = @solution
            </li>
            }
        }
    }   
</div>

<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>

<script type="text/javascript">

    function formatXLabels() {
        return this.value;
    }
    function formatYLabels() {
        return this.value;
    }
</script>

@{ var chartOptions =
      new Highcharts
      {
          Chart = new Highsoft.Web.Mvc.Charts.Chart
          {
              Inverted = false,
              Type = ChartType.Spline,
              ZoomType = ChartZoomType.Xy

          },
          Title = new Title
          {
              Text = null
          },

          XAxis = new List<XAxis>
              {
                new XAxis
                {
                    //Reversed = true,
                    Title = new XAxisTitle
                    {
                        Text = null //was x
                    },
                    Labels = new XAxisLabels
                    {
                        Formatter = "formatXLabels"
                    },
                    MaxPadding = 0.05,
                    ShowLastLabel = true
                }
            },
            YAxis = new List<YAxis>
            {
                new YAxis
                {
                    //Reversed = true,
                    Title = new YAxisTitle
                    {
                        Text = null //was y
                    },
                    Labels = new YAxisLabels
                    {
                        Formatter = "formatYLabels"
                    },
                    LineWidth = 2
                }
            },
          Legend = new Legend
          {
              Enabled = false
          },
          Tooltip = new Tooltip
          {
              HeaderFormat = null,
              PointFormat = "({point.x},{point.y})"
          },

          PlotOptions = new PlotOptions
          {
              Spline = new PlotOptionsSpline
              {
                  Marker = new PlotOptionsSplineMarker
                  {
                      Enabled = true
                  }
              }
          },

          Series = new List<Series>
              {
                new SplineSeries
                {
                    Data = Model.Coordinates as List<SplineSeriesData>
                },
                new SplineSeries
                {
                    Data = Model.xAxis as List<SplineSeriesData>
                }
            }
      };

    chartOptions.ID = "chart";
    var renderer = new HighchartsRenderer(chartOptions);
    
    }

@try{
    if(Model.Coordinates != null){
   
    @Html.Raw(renderer.RenderHtml())
}
}
catch{

}




